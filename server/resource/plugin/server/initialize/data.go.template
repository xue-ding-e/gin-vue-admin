package data

import (
	"context"
	"{{.Module}}/plugin/{{.Package}}/model"
    "{{.Module}}/service/system"
    "github.com/pkg/errors"
    "gorm.io/gorm"
)


type init{{.StructName}} struct{}

func init() {
	system.RegisterInit(int(system.GetInitCounter()), &init{{ .StructName }}{})
}

func (i init{{ .StructName }}) InitializerName() string {
	return model.{{.StructName}}{}.TableName()
}

func (i *init{{ .StructName }}) MigrateTable(ctx context.Context) (context.Context, error) {
	db, ok := ctx.Value("db").(*gorm.DB)
	if !ok {
		return ctx, system.ErrMissingDBContext
	}
    return ctx, db.AutoMigrate(&model.{{.StructName}}{})
}
func (i *init{{ .StructName }}) TableCreated(ctx context.Context) bool {
	db, ok := ctx.Value("db").(*gorm.DB)
	if !ok {
		return false
	}
	return db.Migrator().HasTable(&model.{{.StructName}}{})
}

func (i *init{{ .StructName }}) InitializeData(ctx context.Context) (context.Context, error) {
	db, ok := ctx.Value("db").(*gorm.DB)
	if !ok {
		return ctx, system.ErrMissingDBContext
	}
    var entities []model.{{.StructName}}
    if err := db.Create(&entities).Error; err != nil {
        return ctx, errors.Wrap(err, model.{{.StructName}}{}.TableName()+" 表数据初始化失败!")
    }


	//next := context.WithValue(ctx, i.InitializerName(), entities)
	//return next, nil
    return ctx, nil
}

func (i *init{{ .StructName }}) DataInserted(ctx context.Context) bool {
	db, ok := ctx.Value("db").(*gorm.DB)
	if !ok {
		return false
	}
	if errors.Is(db.First(&model.{{.StructName}}{}).Error, gorm.ErrRecordNotFound) {
		return false
	}
	return true
}